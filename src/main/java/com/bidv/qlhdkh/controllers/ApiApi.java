/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bidv.qlhdkh.controllers;

import com.bidv.qlhdkh.model.ConfigTopic;
import com.bidv.qlhdkh.model.NumberModel;
import com.bidv.qlhdkh.model.Response;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.Optional;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-06-25T12:58:10.898040100+07:00[Asia/Bangkok]")

@Validated
@Api(value = "api", description = "the api API")
public interface ApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /api/genCode : GenCodeAuto
     *
     * @param codeLevel      Code He Thong hoac Co So (required)
     * @param codeBds        Code bds (required)
     * @param codeDepartment Code Department (required)
     * @param filed          code filed (required)
     * @param year           year current (required)
     * @return successful operation (status code 200)
     * or Invalid NumberModel supplied (status code 400)
     * or NumberModel not found (status code 404)
     */
    @ApiOperation(value = "GenCodeAuto", nickname = "genCodeAuto", notes = "", response = NumberModel.class, tags = {"GenCodeAuto",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = NumberModel.class),
            @ApiResponse(code = 400, message = "Invalid NumberModel supplied"),
            @ApiResponse(code = 404, message = "NumberModel not found")})
    @RequestMapping(value = "/api/genCode",
            produces = {"application/json"},
            method = RequestMethod.GET)
    default ResponseEntity<?> genCodeAuto(@NotNull @ApiParam(value = "Code He Thong hoac Co So", required = true) @Valid @RequestParam(value = "codeLevel", required = true) String codeLevel, @NotNull @ApiParam(value = "Code bds", required = true) @Valid @RequestParam(value = "codeBds", required = true) String codeBds, @NotNull @ApiParam(value = "Code Department", required = true) @Valid @RequestParam(value = "codeDepartment", required = true) String codeDepartment, @NotNull @ApiParam(value = "code filed", required = true) @Valid @RequestParam(value = "filed", required = true) String filed, @NotNull @ApiParam(value = "year current", required = true) @Valid @RequestParam(value = "year", required = true) String year) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"numberSequence\" : 6, \"keyNumber\" : \"keyNumber\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/getModelConfigs : Get All ConfigTopic
     * Get All ConfigTopic
     *
     * @return successful operation (status code 200)
     * or Invalid Data (status code 400)
     * or ConfigTopic not found (status code 404)
     */
    @ApiOperation(value = "Get All ConfigTopic", nickname = "getAllConfigTopic", notes = "Get All ConfigTopic", response = ConfigTopic.class, responseContainer = "List", tags = {"model",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = ConfigTopic.class, responseContainer = "List"),
            @ApiResponse(code = 400, message = "Invalid Data"),
            @ApiResponse(code = 404, message = "ConfigTopic not found")})
    @RequestMapping(value = "/api/getModelConfigs",
            produces = {"application/json"},
            method = RequestMethod.GET)
    default ResponseEntity<?> getAllConfigTopic() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"keyTopic\" : \"keyTopic\", \"codeTopic\" : \"codeTopic\", \"nameTopic\" : \"nameTopic\", \"id\" : 0, \"parentId\" : \"parentId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
